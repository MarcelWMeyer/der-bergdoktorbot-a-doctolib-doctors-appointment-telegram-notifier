name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Lint Python code
      run: |
        python -m py_compile notifyDoctolibDoctorsAppointment.py
        echo "✅ Python syntax check passed"
        
    - name: Test Docker build
      run: |
        docker build -t bergdoktorbot-test .
        echo "✅ Docker build successful"
        
    - name: Test Docker run
      run: |
        # Test that container can start with minimal config
        docker run --rm \
          -e RUN_MODE=manual \
          -e TELEGRAM_BOT_TOKEN=dummy_token \
          -e TELEGRAM_CHAT_ID=dummy_chat \
          bergdoktorbot-test \
          python -c "
          import os
          print('✅ Container starts successfully')
          print('Python version:', __import__('sys').version)
          print('Environment variables loaded:', bool(os.getenv('TELEGRAM_BOT_TOKEN')))
          "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets..."
        # Look for potential hardcoded tokens/secrets (but exclude legitimate variable names and getenv calls)
        if grep -n -E "(['\"][0-9]{8,}:[A-Za-z0-9_-]{35}['\"]|['\"][0-9]{10,}['\"])" notifyDoctolibDoctorsAppointment.py | grep -v getenv; then
          echo "❌ Found potential hardcoded secrets in Python file"
          exit 1
        fi
        echo "✅ No hardcoded secrets found"
        
    - name: Verify .env is gitignored
      run: |
        if grep -q "^\.env$" .gitignore; then
          echo "✅ .env is properly gitignored"
        else
          echo "❌ .env should be in .gitignore"
          exit 1
        fi

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        echo "Checking required documentation files..."
        required_files=("README.md" "DOCKER.md" "CHANGELOG.md" "CONTRIBUTING.md" ".env.example")
        missing_files=()
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file is missing"
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "Missing files: ${missing_files[*]}"
          exit 1
        fi
        echo "✅ All required documentation files present"
        
    - name: Validate Docker configuration
      run: |
        echo "Validating Docker setup..."
        if [[ -f "Dockerfile" ]]; then
          echo "✅ Dockerfile exists"
        else
          echo "❌ Dockerfile missing"
          exit 1
        fi
        
        if [[ -f "docker-compose.yml" ]]; then
          echo "✅ docker-compose.yml exists"
          # Basic syntax check
          if docker compose config >/dev/null 2>&1; then
            echo "✅ docker-compose.yml is valid"
          else
            echo "⚠️ docker-compose.yml syntax check skipped (compose not available)"
          fi
        else
          echo "❌ docker-compose.yml missing"
          exit 1
        fi