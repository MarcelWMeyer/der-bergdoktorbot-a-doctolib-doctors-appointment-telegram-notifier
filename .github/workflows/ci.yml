name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Lint Python code
      run: |
        python -m py_compile notifyDoctolibDoctorsAppointment.py
        
    - name: Test Docker build
      run: |
        docker build -t bergdoktorbot-test .
        
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        # Set dummy values for testing
        sed -i 's/your_telegram_bot_token_here/123456789:ABC-DEF/' .env
        sed -i 's/your_telegram_chat_id_here/-123456789/' .env
        sed -i 's|https://www.doctolib.de/availabilities.json?.*|https://httpbin.org/json|g' .env
        docker-compose config
        
    - name: Test configuration parsing
      run: |
        docker run --rm \
          -e RUN_MODE=manual \
          -e TELEGRAM_BOT_TOKEN=test \
          -e TELEGRAM_CHAT_ID=test \
          -e DOCTOR_1_NAME="Test Doctor" \
          -e DOCTOR_1_AVAILABILITIES_URL="https://httpbin.org/json" \
          -e DOCTOR_1_BOOKING_URL="https://httpbin.org" \
          bergdoktorbot-test \
          python -c "
          import os, re
          from notifyDoctolibDoctorsAppointment import get_doctor_configurations
          doctors = get_doctor_configurations()
          assert len(doctors) == 1
          assert doctors[0]['name'] == 'Test Doctor'
          print('✅ Configuration parsing test passed')
          " || echo "⚠️ Configuration test requires code refactoring"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for secrets in code
      run: |
        # Check for potential secrets in Python file
        if grep -E "(token|password|secret|key)" notifyDoctolibDoctorsAppointment.py | grep -v "getenv\|#"; then
          echo "❌ Found potential hardcoded secrets"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi
        
    - name: Verify .env is gitignored
      run: |
        if grep -q "^\.env$" .gitignore; then
          echo "✅ .env is properly gitignored"
        else
          echo "❌ .env should be in .gitignore"
          exit 1
        fi

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        required_files=("README.md" "DOCKER.md" "CHANGELOG.md" "CONTRIBUTING.md" ".env.example")
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file is missing"
            exit 1
          fi
        done
        
    - name: Validate docker-compose.yml
      run: |
        docker-compose config >/dev/null
        echo "✅ docker-compose.yml is valid"